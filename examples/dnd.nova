/*
    This program is mostly for fun, but also to show off some stuff!
*/

use std::io::println;
use std::rand;

#debug -> 
struct Race : Enum {
    Elf,
    Dragonborn,
    Dwarf,
    Gnome,
    Human,
    // To be added...
}

#debug -> 
struct Class : Enum {
    Barbarian,
    Bard,
    Cleric,
    Druid,
    Fighter,
    Monk,
    Paladin,
    Wizard,
    Warlock,
}

#debug -> 
struct Alignment : Enum {
    Lawful  : Enum { Good, Neutral, Evil },
    Chaotic : Enum { Good, Neutral, Evil }
    Neutral : Enum { Good, True,    Evil },
}

#debug ->
struct Character : Compact {
    name:      String,
    race:      Race,
    class:     Class,
    alignment: Alignment,
    // Stats will automatically be assumes as a Compact struct
    stats : {
        strength:       Usize,
        dexterity:      Usize,
        constitution:   Usize,
        intelligence:   Usize,
        wisdom:         Usize,
        charisma:       Usize,
    },
}

Character : impl {
    public func new(
        name: String, 
        race: Race, 
        class: Class, 
        alignment: Alignment = Alignment::Neutral::True
    ) : Self {
        return Self {
            name,
            race,
            class,
            // Spread only works if the return is of the correct type
            // and the number of elements fits
            stats: ...Self::get_random_stats(),
        }
    }

    // Define a private function that can only be accessed from within this impl block
    private get_random_stats : [Usize; 6] {
        mut res: [Usize; 6]; // Initialize empty Array of 6

        for _ in range 6 {
            // Turbo fish, will refresh rand::arg after each use
            res[i] = rand::new::<Usize>();
        }

        return res;
    }
}

func main : {
    // Initialize rand's arg with specific values, for non-specific arg, please use init_arg
    // This arg will use xs values, then random values
    rand::init_arg_with([16, 17, 15, 18, 12, 16]);

    /* Creates a character:
        Name:      Kaarjuak Navull
        Race:      Dragonborn,
        Class:     Paladin,
        Alignment: True Neutral,
    */
    const kaarjuak = Character::new("Kaarjuak Navull", Race::Dragonborn, Class::Paladin);

    println("Character: {}", kaarjuak);
}